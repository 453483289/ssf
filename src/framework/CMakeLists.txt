# specific platform lib
set(PLATFORM_LIB "")

file(GLOB_RECURSE SSF_FRAMEWORK_COMMON_IO_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/io/*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/io/*.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/io/*.ipp")

set(SSF_FRAMEWORK_COMMON_ERROR_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/error/error.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/error/error.ipp")

set(SSF_FRAMEWORK_COMMON_LOG_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/log/log.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/log/log.cpp")

file(GLOB_RECURSE SSF_FRAMEWORK_COMMON_NETWORK_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/network/*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/network/*.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/network/*.ipp")

file(GLOB_RECURSE SSF_FRAMEWORK_COMMON_UTILS_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/utils/*.h"
)

# layer files
file(GLOB SSF_FRAMEWORK_LAYER_BASE_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/*.cpp")

file(GLOB SSF_FRAMEWORK_LAYER_CONGESTION_FILES
"${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/congestion/*.h")

file(GLOB_RECURSE SSF_FRAMEWORK_LAYER_CRYPTOGRAPHY_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/cryptography/*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/cryptography/*.cpp")

file(GLOB SSF_FRAMEWORK_LAYER_DATA_LINK_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/data_link/*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/data_link/*.cpp")

file(GLOB SSF_FRAMEWORK_LAYER_DATAGRAM_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/datagram/*.h")

file(GLOB SSF_FRAMEWORK_LAYER_INTERFACE_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/interface_layer/*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/interface_layer/*.cc")

file(GLOB SSF_FRAMEWORK_LAYER_MULTIPLEXING_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/multiplexing/*.h")

file(GLOB SSF_FRAMEWORK_LAYER_NETWORK_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/network/*.h")

file(GLOB SSF_FRAMEWORK_LAYER_PHYSICAL_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/physical/*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/physical/*.cpp")

file(GLOB SSF_FRAMEWORK_LAYER_PROXY_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/proxy/*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/proxy/*.cpp")

if (WIN32)
  list(APPEND PLATFORM_LIB "Secur32.lib")
  list(APPEND SSF_FRAMEWORK_LAYER_PROXY_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/proxy/windows/sspi_auth_impl.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/proxy/windows/sspi_auth_impl.cpp")
endif (WIN32)
if (UNIX)
  list(APPEND SSF_FRAMEWORK_LAYER_PROXY_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/proxy/unix/gssapi_auth_impl.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/proxy/unix/gssapi_auth_impl.cpp")
endif (UNIX)

file(GLOB SSF_FRAMEWORK_LAYER_QUEUE_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/queue/*.h")

file(GLOB SSF_FRAMEWORK_LAYER_ROUTING_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/layer/routing/*.h")

set(SSF_FRAMEWORK_LAYER_FILES
    "${SSF_FRAMEWORK_LAYER_BASE_FILES}"
    "${SSF_FRAMEWORK_LAYER_CONGESTION_FILES}"
    "${SSF_FRAMEWORK_LAYER_CRYPTOGRAPHY_FILES}"
    "${SSF_FRAMEWORK_LAYER_DATA_LINK_FILES}"
    "${SSF_FRAMEWORK_LAYER_DATAGRAM_FILES}"
    "${SSF_FRAMEWORK_LAYER_INTERFACE_FILES}"
    "${SSF_FRAMEWORK_LAYER_MULTIPLEXING_FILES}"
    "${SSF_FRAMEWORK_LAYER_NETWORK_FILES}"
    "${SSF_FRAMEWORK_LAYER_PHYSICAL_FILES}"
    "${SSF_FRAMEWORK_LAYER_PROXY_FILES}"
    "${SSF_FRAMEWORK_LAYER_QUEUE_FILES}"
    "${SSF_FRAMEWORK_LAYER_ROUTING_FILES}"
)

file(GLOB_RECURSE SSF_FRAMEWORK_INTERFACES_SYSTEM_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/system/*interface*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/system/*interface*.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/system/*interface*.ipp")

file(GLOB_RECURSE SSF_FRAMEWORK_ROUTERS_SYSTEM_FILES
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/system/*router*.h"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/system/*router*.cpp"
    "${CMAKE_CURRENT_SOURCE_DIR}/ssf/system/*router*.ipp")

add_target("lib_ssf_network"
  TYPE
    library ${EXEC_FLAG} STATIC
  LINKS
    ${OPENSSL_LIBRARIES}
    ${Boost_LIBRARIES}
    ${PLATFORM_SPECIFIC_LIB_DEP}
    lib_http_parser
    ${PLATFORM_LIB}
  PREFIX_SKIP     .*/src
  HEADER_FILTER   "\\.h(h|m|pp|xx|\\+\\+)?"
  FILES
    ${SSF_FRAMEWORK_COMMON_LOG_FILES}
    ${SSF_FRAMEWORK_COMMON_ERROR_FILES}
    ${SSF_FRAMEWORK_COMMON_IO_FILES}
    ${SSF_FRAMEWORK_COMMON_NETWORK_FILES}
    ${SSF_FRAMEWORK_COMMON_UTILS_FILES}
    ${SSF_FRAMEWORK_LAYER_FILES}
    #${SSF_FRAMEWORK_INTERFACES_SYSTEM_FILES}
    #${SSF_FRAMEWORK_ROUTERS_SYSTEM_FILES}
  INCLUDE_DIRECTORIES
    ${OPENSSL_INCLUDE_DIR}
    ${Boost_INCLUDE_DIRS}
    ${CMAKE_CURRENT_SOURCE_DIR}
)

target_include_directories(lib_ssf_network
  INTERFACE
    ${OPENSSL_INCLUDE_DIR}
    ${Boost_INCLUDE_DIRS}
    ${CMAKE_CURRENT_SOURCE_DIR}
)

if (BUILD_FRAMEWORK_UNIT_TESTS)
  add_subdirectory(tests)
endif(BUILD_FRAMEWORK_UNIT_TESTS)
